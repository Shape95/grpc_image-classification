# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.classification_pb2 as classification__pb2


class ClassificationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTextResult = channel.stream_unary(
                '/maum.brain.classification.cifar.Classification/GetTextResult',
                request_serializer=classification__pb2.SampleInput.SerializeToString,
                response_deserializer=classification__pb2.SampleOutput.FromString,
                )
        self.GetResult = channel.stream_unary(
                '/maum.brain.classification.cifar.Classification/GetResult',
                request_serializer=classification__pb2.Input.SerializeToString,
                response_deserializer=classification__pb2.Output.FromString,
                )


class ClassificationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTextResult(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClassificationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTextResult': grpc.stream_unary_rpc_method_handler(
                    servicer.GetTextResult,
                    request_deserializer=classification__pb2.SampleInput.FromString,
                    response_serializer=classification__pb2.SampleOutput.SerializeToString,
            ),
            'GetResult': grpc.stream_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=classification__pb2.Input.FromString,
                    response_serializer=classification__pb2.Output.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'maum.brain.classification.cifar.Classification', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Classification(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTextResult(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/maum.brain.classification.cifar.Classification/GetTextResult',
            classification__pb2.SampleInput.SerializeToString,
            classification__pb2.SampleOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/maum.brain.classification.cifar.Classification/GetResult',
            classification__pb2.Input.SerializeToString,
            classification__pb2.Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
